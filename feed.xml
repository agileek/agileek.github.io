<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Agile &amp; Java</title>
        <description>Another blog on agile and java. Maybe i&#39;ll add kittens and food recipe if my partner helps me.</description>
        <link>https://agileek.github.io/</link>
        <atom:link href="https://agileek.github.io/feed.xml" rel="self" type="application/rss+xml" />
        <pubDate>Mon, 04 Jan 2016 09:28:20 +0000</pubDate>
        <lastBuildDate>Mon, 04 Jan 2016 09:28:20 +0000</lastBuildDate>
        <generator>Jekyll v2.4.0</generator>
        
        <item>
            <title>Http is dead</title>
            <description>&lt;p&gt;In a &lt;a href=&quot;/jekyll/2015/11/20/disqus-https-and-http/&quot;&gt;previous article&lt;/a&gt; I talked about switching to &lt;strong&gt;&lt;em&gt;https&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Since the 3rd December, &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;&lt;em&gt;Let’s Encrypt&lt;/em&gt;&lt;/a&gt; is in public beta&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, that means that everybody can have free trusted ssl certificates.&lt;/p&gt;

&lt;p&gt;That’s right, you heard it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/letsencrypt/meme.jpg&quot; alt=&quot;OprahHttps&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What would be an agileek article without a little bit of &lt;strong&gt;Docker&lt;/strong&gt; in it?&lt;/p&gt;

&lt;h1 id=&quot;goal&quot;&gt; Goal&lt;/h1&gt;

&lt;p&gt;I will show you how to generate and use an ssl certificate with nginx.&lt;/p&gt;

&lt;p&gt;First, you generate the certificate with:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -it --rm -p 443:443 --name letsencrypt -v /etc/letsencrypt:/etc/letsencrypt -v /var/lib/letsencrypt:/var/lib/letsencrypt quay.io/letsencrypt/letsencrypt:latest --server https://acme-v01.api.letsencrypt.org/directory certonly -a standalone -d hello.lilymic.gotgeeks.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then you configure your nginx in order to use this certificates :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssl_certificate      /etc/letsencrypt/live/lilymic.gotgeeks.com-0001/fullchain.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
ssl_certificate_key  /etc/letsencrypt/live/lilymic.gotgeeks.com-0001/privkey.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
ssl_session_timeout 1d&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
ssl_session_cache shared:SSL:50m&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
ssl_session_tickets off&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# modern configuration. tweak to your needs.&lt;/span&gt;
ssl_protocols TLSv1.1 TLSv1.2&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
ssl_ciphers &lt;span class=&quot;s1&quot;&gt;&amp;#39;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    ssl_prefer_server_ciphers on;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)&lt;/span&gt;
add_header Strict-Transport-Security max-age&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;15768000&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# OCSP Stapling ---&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# fetch OCSP records from URL in ssl_certificate and cache them&lt;/span&gt;
ssl_stapling on&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
ssl_stapling_verify on&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;## verify chain of trust of OCSP response using Root CA and Intermediate certs&lt;/span&gt;

server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        listen       &lt;span class=&quot;m&quot;&gt;443&lt;/span&gt; ssl&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        server_name  hello.lilymic.gotgeeks.com&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;            
            add_header Content-Type text/plain&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Take a look at this awesome certificate!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Aaaaaaand it’s done.&lt;/p&gt;

&lt;p&gt;You can look at &lt;a href=&quot;https://hello.lilymic.gotgeeks.com/&quot;&gt;https://hello.lilymic.gotgeeks.com/&lt;/a&gt; and see that everything is &lt;img src=&quot;/images/posts/letsencrypt/super_green.gif&quot; alt=&quot;so green&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;You can donate to them:  &lt;a href=&quot;https://letsencrypt.org/donate&quot;&gt;https://letsencrypt.org/donate&lt;/a&gt; or to EFF: &lt;a href=&quot;https://eff.org/donate-le&quot;&gt;https://eff.org/donate-le&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
            <pubDate>Sat, 05 Dec 2015 00:00:00 +0000</pubDate>
            <link>https://agileek.github.io/docker/2015/12/05/letsencrypt-https/</link>
            <guid isPermaLink="true">https://agileek.github.io/docker/2015/12/05/letsencrypt-https/</guid>
            
            <category>letsencrypt,docker</category>
            
            
            <category>docker</category>
            
        </item>
        
        <item>
            <title>Raspberry Pi, RFXCom and Domoticz</title>
            <description>&lt;p&gt;This begins a serie of home automation articles.&lt;/p&gt;

&lt;h2 id=&quot;first-step&quot;&gt;First step&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/home_automation/yc-4000s.jpg&quot; alt=&quot;phenix&quot; class=&quot;float_image&quot; /&gt;
I recommend to start with something easy.&lt;/p&gt;

&lt;p&gt;I tried a remote controllable wall socket a few years ago, and it really works very well. I use it to control 4 lights area in my living room.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Now it’s time to take it to the next level!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;choose-wisely&quot;&gt; Choose wisely&lt;/h2&gt;

&lt;p&gt;There are 2 main wireless protocols to communicate with your devices, 433.92 MHz and Z-wave.&lt;/p&gt;

&lt;p&gt;433.92 MHz is just the communication frequency, and every constructor implements its own protocol.&lt;/p&gt;

&lt;p&gt;There are a lot of devices you can find using 433.92 MHz, but if you want to control everything, you’ll need something generic.&lt;/p&gt;

&lt;p&gt;Here comes the &lt;a href=&quot;http://www.rfxcom.com/en_GB&quot;&gt;rfxcom&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the world of domotics you can order your equipment from a wide range of suppliers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s a usb device that receives and sends signals via 433.92 MHz.&lt;/p&gt;

&lt;p&gt;With that tool I needed a “home brain”, something that could control various stuff.&lt;/p&gt;

&lt;p&gt;After some digging (and advices from &lt;a href=&quot;https://twitter.com/florianchauveau&quot;&gt;Florian Chauveau&lt;/a&gt;), I decided to use &lt;a href=&quot;https://domoticz.com/&quot;&gt;domoticz&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;glue-it-all-together&quot;&gt; Glue it all together&lt;/h2&gt;

&lt;h3 id=&quot;docker-on-raspberry-pi&quot;&gt; Docker on raspberry pi&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/home_automation/raspberry_pi_logo.svg&quot; alt=&quot;raspberrypi&quot; class=&quot;float_image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I recommend to look at &lt;a href=&quot;https://github.com/fchauveau/rpi-domoticz-docker&quot;&gt;https://github.com/fchauveau/rpi-domoticz-docker&lt;/a&gt;, everything is explained:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Setup an image on your sdcard with docker 32bits installed&lt;/li&gt;
  &lt;li&gt;Build the rpi-domoticz-docker image on your raspberry (optional if you pull it from the registry)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;recipe&quot;&gt; Recipe&lt;/h3&gt;
&lt;p&gt;Here is what I did&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download a docker ready image for your sdcard at &lt;a href=&quot;http://blog.hypriot.com/downloads/&quot;&gt;http://blog.hypriot.com/downloads/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Copy the image to the sdcard
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;sudo dd if=hypriot-rpi-20151103-224349.img of=/dev/mmcblk0 bs=1M&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Start your raspberry&lt;/li&gt;
  &lt;li&gt;Plug in the rfxcom&lt;/li&gt;
  &lt;li&gt;Connect to it via ssh (root/hypriot)&lt;/li&gt;
  &lt;li&gt;Get the latest rpi-domoticz-docker
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;docker pull agileek/rpi-domoticz-docker&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Launch it
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;docker run --device=/dev/ttyUSB0 -p 8080:8080 -d agileek/rpi-domoticz-docker&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Backup &lt;code&gt;-v /root/domoticz.db:/root/domoticz/domoticz.db&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Connect to domoticz http://mydomoticzserveraddress:8080&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t forget to add the rfxcom to the hardware list and enjoy!&lt;/p&gt;

</description>
            <pubDate>Sat, 05 Dec 2015 00:00:00 +0000</pubDate>
            <link>https://agileek.github.io/home_automation/2015/12/05/home_automation_domoticz/</link>
            <guid isPermaLink="true">https://agileek.github.io/home_automation/2015/12/05/home_automation_domoticz/</guid>
            
            <category>domoticz,docker,raspberryPi</category>
            
            
            <category>home_automation</category>
            
        </item>
        
        <item>
            <title>Forcing https for GitHub Pages and Disqus</title>
            <description>&lt;h3 id=&quot;observation&quot;&gt; Observation&lt;/h3&gt;

&lt;p&gt;This blog uses &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, which are by default available using both &lt;strong&gt;&lt;em&gt;http&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;https&lt;/em&gt;&lt;/strong&gt; protocols.&lt;/p&gt;

&lt;p&gt;The comments are powered by Disqus, and it works really well. Almost really well, actually, because something strange appeared using only &lt;strong&gt;&lt;em&gt;https&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Why switching to &lt;strong&gt;&lt;em&gt;https&lt;/em&gt;&lt;/strong&gt; only ?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http/&quot;&gt;Firefox starts to deprecate non secure &lt;strong&gt;&lt;em&gt;http&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://googlewebmastercentral.blogspot.fr/2014/08/https-as-ranking-signal.html&quot;&gt;Https as a ranking signal on google&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://letsencrypt.org/2015/10/19/lets-encrypt-is-trusted.html&quot;&gt;Let’s Encrypt is trusted!&lt;/a&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;force-https-on-github-pages&quot;&gt; Force &lt;strong&gt;&lt;em&gt;https&lt;/em&gt;&lt;/strong&gt; on Github Pages&lt;/h3&gt;

&lt;p&gt;I found this gist to force the &lt;strong&gt;&lt;em&gt;https&lt;/em&gt;&lt;/strong&gt; redirection, simple, efficient.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;&amp;lt;script&amp;gt;
var host = &amp;quot;YOURDOMAIN.github.io&amp;quot;;
if ((host == window.location.host) &amp;amp;&amp;amp; (window.location.protocol != &amp;quot;https:&amp;quot;))
    window.location.protocol = &amp;quot;https&amp;quot;;
&amp;lt;/script&amp;gt;&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/konklone/9968713.js?file=ssl-redirect.html&quot;&gt; &lt;/script&gt;

&lt;p&gt;Then I noticed that some of the comments were gone. As you can see on the animation below, they appeared only when using &lt;strong&gt;&lt;em&gt;http&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/jekyll/disqus_http_https.gif&quot; alt=&quot;Disqus http vs https&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;migrate-disqus-comments&quot;&gt; Migrate Disqus comments&lt;/h3&gt;

&lt;p&gt;In fact, Disqus treat &lt;a href=&quot;http://agileek.github.io&quot;&gt;http://agileek.github.io&lt;/a&gt; and &lt;a href=&quot;https://agileek.github.io&quot;&gt;https://agileek.github.io&lt;/a&gt; as 2 differents sites&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, so if someone post a comment on the &lt;strong&gt;&lt;em&gt;http&lt;/em&gt;&lt;/strong&gt; “version” it’s not displayed on the &lt;strong&gt;&lt;em&gt;https&lt;/em&gt;&lt;/strong&gt; side.&lt;/p&gt;

&lt;p&gt;Luckily, Disqus has some migration tools, and in this case an &lt;strong&gt;“URL mapper”&lt;/strong&gt; which can be found in the admin section “https://YOURDISQUSNAME.disqus.com/admin/discussions/migrate/”.&lt;/p&gt;

&lt;p&gt;It’s a three steps procedure:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download via Disqus admin tool the list of &lt;a href=&quot;/images/posts/jekyll/initial_disqus_import.csv&quot;&gt;blog posts.&lt;/a&gt;&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;Add a second column where “http” is &lt;a href=&quot;/images/posts/jekyll/disqus_mapper.csv&quot;&gt;replaced by “https”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Launch the migration&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;24 hours later, all the comments are available via the &lt;strong&gt;&lt;em&gt;https&lt;/em&gt;&lt;/strong&gt; URL, and nobody can comment on the &lt;strong&gt;&lt;em&gt;http&lt;/em&gt;&lt;/strong&gt; part thanks to the script above.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Ok, this is not relevant here since I’m using GitHub’s certificates, but Let’s Encrypt is just too huge to not talk about. I will soon write an article about it. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;The “issue” has been reported several times but never corrected, is this a hidden feature? &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;There is a lot of unnecessary links, even my drafts appear here &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
            <pubDate>Fri, 20 Nov 2015 14:00:00 +0000</pubDate>
            <link>https://agileek.github.io/jekyll/2015/11/20/disqus-https-and-http/</link>
            <guid isPermaLink="true">https://agileek.github.io/jekyll/2015/11/20/disqus-https-and-http/</guid>
            
            
            <category>jekyll</category>
            
        </item>
        
        <item>
            <title>Changer de mapping, changer de clavier</title>
            <description>&lt;p&gt;Cela fait bientôt 3 ans que j’ai changé de mapping et de clavier, il est temps de faire un petit bilan.&lt;/p&gt;

&lt;h2 id=&quot;le-choix-du-clavier&quot;&gt;Le choix du clavier&lt;/h2&gt;

&lt;p&gt;Il existe des tas de claviers, j’ai des collègues complètement à fond sur le sujet (Oui sylvain, c’est de toi que je parle, avec ton ergodox et Ctrl+Alt+Shift au pied) et les énumérer là n’est pas le sujet. Si je devais en citer 3, je pense qu’il y’aurait l’&lt;a href=&quot;http://ergodox.org/1&quot;&gt;ergodox&lt;/a&gt;, &lt;a href=&quot;http://www.keyboard.io/&quot;&gt;keyboard.io&lt;/a&gt; et le &lt;a href=&quot;http://www.typematrix.com/&quot;&gt;typematrix&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;J’ai finalement choisi le typematrix.&lt;/p&gt;

&lt;h2 id=&quot;le-choix-du-mapping&quot;&gt;Le choix du mapping&lt;/h2&gt;

&lt;p&gt;Sujet interminable également, que choisir ? Dvorak, Bépo, Colemak ? Au final j’ai choisi Dvorak, plutôt par élimination.&lt;/p&gt;

&lt;p&gt;Premier éliminé : le Bépo car je code en anglais &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; et je compte coder encore un peu.&lt;/p&gt;

&lt;p&gt;Pour Colemak vs Dvorak, beaucoup d’articles très techniques se battent pour dire que leur mapping est n% plus rapide et demande moins de mouvements que l’autre, au final j’ai pris le plus utilisé : Dvorak (et puis, avoir toutes les voyelles du même côté, ça claque&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;).&lt;/p&gt;

&lt;h2 id=&quot;lapprentissage&quot;&gt;L’apprentissage&lt;/h2&gt;

&lt;p&gt;Ça a été l’occasion pour moi de complètement ré-apprendre le clavier. Ce n’est vraiment pas facile et très frustrant (Vous ressemblez un peu à certains membres de votre famille, parfois même, plus choquant, des collègues qui ne sont pas à l’aise avec leur pc). Quitte à ré-apprendre, autant le faire bien, car j’ai appris l’azerty au fur et à mesure, en plaçant mes doigts n’importe comment sans jamais faire l’effort d’apprendre proprement. En fait si, avant d’acheter un typematrix, j’ai essayé de ré-apprendre l’azerty en faisant des exercices, mais au final les mauvaises habitudes étaient trop ancrées dans mes doigts.&lt;/p&gt;

&lt;h3 id=&quot;les-resources&quot;&gt;Les resources&lt;/h3&gt;

&lt;p&gt;Les resources pour apprendre sont nombreuses, certaines sont précises et vous montrent &lt;a href=&quot;http://thetypingcat.com/course/dvorak&quot;&gt;quel doigt utiliser&lt;/a&gt;, d’autres &lt;a href=&quot;http://learn.dvorak.nl/&quot;&gt;plus simples&lt;/a&gt;, je vous laisse chercher, certains sont IE 5 compliants, d’autres un peu plus récents.&lt;/p&gt;

&lt;p&gt;Au final après avoir passé plusieurs heures dessus, ça devient vite lassant. Étant joueur de tempérament, j’ai beaucoup apprécié &lt;a href=&quot;http://phoboslab.org/ztype/&quot;&gt;z-type&lt;/a&gt;, mais mon préféré reste &lt;a href=&quot;http://play.typeracer.com/&quot;&gt;typeracer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;N’hésitez pas à venir me défier sur ce site !&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://data.typeracer.com/pit/profile?user=bitardo&amp;amp;ref=badge&quot; target=&quot;_top&quot;&gt;&lt;img src=&quot;http://data.typeracer.com/misc/badge?user=bitardo&quot; class=&quot;float_image&quot; border=&quot;0&quot; alt=&quot;TypeRacer.com scorecard for user bitardo&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ce qui est intéressant surtout c’est de pouvoir suivre notre progression : voici la mienne&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/mapping/typeracer.png&quot; alt=&quot;typeracer&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;le-typematrix&quot;&gt;Le typematrix&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/mapping/typematrix_dvorak.png&quot; alt=&quot;typematrix&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pas grand chose à dire dessus, j’en suis très content, tout est à disposition.&lt;/p&gt;

&lt;p&gt;Les plus :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;le côté matriciel est vraiment top&lt;/li&gt;
  &lt;li&gt;les touches delete, backspace et enter au milieu&lt;/li&gt;
  &lt;li&gt;le couper/copier/coller en accés rapide en bas à gauche&lt;/li&gt;
  &lt;li&gt;le switch de fenêtre avec la touche shuffle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Les moins :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;le manque de pavé numérique (officiellement pour réduire l’encombrement)&lt;/li&gt;
  &lt;li&gt;les touches de fonction tout à droite vraiment inutiles (mais re-mappables)&lt;/li&gt;
  &lt;li&gt;la touche insert en accès Fn + Insert qui ne fonctionne pas sous certaines applis (j’ai mappé Insert à la place de la touche Mail…)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Après avoir galéré pendant 4-5 mois pour revenir à un niveau de frappe correct, je suis vraiment très satisfait d’avoir changé. Le fait d’avoir changé le clavier et le mapping me permet de conserver une certaine aisance avec les claviers azerty qui fait que je ne suis pas perdu quand je me retrouve sur mon laptop ou sur le poste d’un collègue. En effet, ça peut paraitre un peu bizarre, mais les doigts switchent assez naturellement d’azerty à dvorak car les touches ne sont pas disposées de la même façon.&lt;/p&gt;

&lt;p&gt;Mon seul regret est d’avoir pris un typematrix dvorak et pas un blank, parce que, étant fainéant, j’ai tendance à regarder mon clavier quand je frappe.&lt;/p&gt;

&lt;h4 id=&quot;ps&quot;&gt;PS&lt;/h4&gt;

&lt;p&gt;Dans un prochain article, j’expliquerai comment binomer quand on a des claviers et des mappings différents.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;certains codent en français, avec les accents dans les noms de méthode et tout, mais voir &lt;strong&gt;&lt;em&gt;public void&lt;/em&gt;&lt;/strong&gt; maméthode() ça me pique les yeux. [troll] Les mots clefs sont en anglais, codons en anglais [/troll]. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;argument objectif &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
            <pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate>
            <link>https://agileek.github.io/2015/04/15/typematrix-dvorak/</link>
            <guid isPermaLink="true">https://agileek.github.io/2015/04/15/typematrix-dvorak/</guid>
            
            
        </item>
        
        <item>
            <title>HTTPie and json: REST in your terminal</title>
            <description>&lt;p&gt;Je suis, comme &lt;a href=&quot;http://agileek.github.io/java/2015/04/08/devoxx-jour-1/#le-tar-du-terminal&quot;&gt;Emmanuel Bernard&lt;/a&gt;, un taré du terminal. Ce que je trouve génial avec cet outil, c’est qu’on n’arrête jamais de découvrir de nouvelles choses.&lt;/p&gt;

&lt;p&gt;Je vais vous parler de la combinaison de 2 outils pour jouer avec du Rest depuis votre terminal :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://httpie.org/&quot;&gt;HTTPie&lt;/a&gt;, qui est un “cURL-like tool for humans”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://trentm.com/json/&quot;&gt;json&lt;/a&gt; (très mauvais nom), qui est un utilitaire pour travailler sur du json&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pour notre exemple on va jouer avec l’API de github, en essayant d’afficher tous les repos docker de l’organisation &lt;code&gt;agileek&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Sous ubuntu/debian : &lt;code&gt;sudo apt-get install httpie &amp;amp;&amp;amp; npm install -g json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Commençons par récupérer la liste des repos associée à mon organisation.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;http https://api.github.com/orgs/agileek/repos&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nous avons un joli résultat bien formaté …&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;HTTP/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;OK&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;Access-Control-Allow-Credentials:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;Access-Control-Allow-Origin:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;...plein&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;de&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;headers...&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;X-XSS-Protection:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;mode=block&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;archive_url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.github.com/repos/agileek/agileek.github.io/{archive_format}{/ref}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;assignees_url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.github.com/repos/agileek/agileek.github.io/assignees{/user}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;blobs_url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.github.com/repos/agileek/agileek.github.io/git/blobs{/sha}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;branches_url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.github.com/repos/agileek/agileek.github.io/branches{/branch}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;clone_url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://github.com/agileek/agileek.github.io.git&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;collaborators_url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.github.com/repos/agileek/agileek.github.io/collaborators{/collaborator}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;comments_url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.github.com/repos/agileek/agileek.github.io/comments{/number}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;commits_url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.github.com/repos/agileek/agileek.github.io/commits{/sha}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;compare_url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.github.com/repos/agileek/agileek.github.io/compare/{base}...{head}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;contents_url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.github.com/repos/agileek/agileek.github.io/contents/{+path}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;contributors_url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.github.com/repos/agileek/agileek.github.io/contributors&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2014-07-23T09:51:52Z&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;default_branch&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;master&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;downloads_url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.github.com/repos/agileek/agileek.github.io/downloads&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;events_url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.github.com/repos/agileek/agileek.github.io/events&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;fork&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.github.com/repos/agileek/agileek.github.io&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;....&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;trop&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;de&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;données&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;… mais il y a tout simplement trop d’informations. Si je veux trouver tous les repos qui ont un lien avec docker, comment je fais ?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mes solutions précédentes consistaient en une série de awk, sed…&lt;br /&gt; 
Vous savez ces choses dont on est fier quand on a un résultat mais quand on revient dessus quelques temps plus tard, on ne comprend plus rien.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;C’est là qu’intervient json. Pour y voir plus clair, n’affichons que les urls.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;http https://api.github.com/orgs/agileek/repos &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; json -a url
https://api.github.com/repos/agileek/agileek.github.io
https://api.github.com/repos/agileek/docker
https://api.github.com/repos/agileek/docker-ansible
https://api.github.com/repos/agileek/docker-jenkins
https://api.github.com/repos/agileek/docker-tips&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;le ‘-a’ indique qu’on descend dans un array&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Voilà, ça pique moins les yeux quand même. Maintenant ne gardons que les urls qui contiennent docker&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;http https://api.github.com/orgs/agileek/repos &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; json -c &lt;span class=&quot;s1&quot;&gt;&amp;#39;this.url.indexOf(&amp;quot;docker&amp;quot;) &amp;gt;= 0&amp;#39;&lt;/span&gt; -a url
https://api.github.com/repos/agileek/docker
https://api.github.com/repos/agileek/docker-ansible
https://api.github.com/repos/agileek/docker-jenkins
https://api.github.com/repos/agileek/docker-tips&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Voilà, c’est terminé ! le &lt;code&gt;-c&lt;/code&gt; indique que vous allez écrire du javascript pour retourner un boolean, je me sers du indexOf pour filtrer tout ce qui contient “docker”.&lt;/p&gt;

&lt;h3 id=&quot;pour-aller-plus-loin&quot;&gt;Pour aller plus loin&lt;/h3&gt;

&lt;p&gt;Je ne vous ai montré que l’interaction basique entre httpie et json, n’hésitez pas à jouer avec httpie pour faire des &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, c’est vraiment très intuitif, je ne peux déjà plus m’en passer.&lt;/p&gt;

&lt;h3 id=&quot;ps&quot;&gt;PS&lt;/h3&gt;

&lt;p&gt;Merci à &lt;a href=&quot;http://www.bloggure.info/&quot;&gt;Cédric Gatay&lt;/a&gt;, des &lt;a href=&quot;http://code-troopers.com/&quot;&gt;Code Troopers&lt;/a&gt; pour m’avoir fait découvrir HTTPie.&lt;/p&gt;

</description>
            <pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate>
            <link>https://agileek.github.io/terminal/2015/04/14/httpie_and_json/</link>
            <guid isPermaLink="true">https://agileek.github.io/terminal/2015/04/14/httpie_and_json/</guid>
            
            
            <category>terminal</category>
            
        </item>
        
        <item>
            <title>Poste de dev avec docker et ansible</title>
            <description>&lt;p&gt;&lt;img src=&quot;/images/posts/docker-ansible/meme_post_fait_pour_vous.jpg&quot; alt=&quot;meme&quot; class=&quot;float_image&quot; /&gt;
Vous avez un projet où il faut 3 jours d’installation acharnée en suivant un wiki obsolète pour réussir à faire un premier commit ?&lt;/p&gt;

&lt;p&gt;Vous n’osez plus mettre à jour votre poste depuis 2006 de peur de ne plus pouvoir travailler ?&lt;/p&gt;

&lt;p&gt;Vous en avez marre d’oublier de mettre à jour le wiki chaque fois qu’il faut installer quelque chose de nouveau pour votre projet ?&lt;/p&gt;

&lt;p&gt;Ce post est fait pour vous !&lt;/p&gt;

&lt;h2 id=&quot;ide-originale&quot;&gt;Idée originale&lt;/h2&gt;

&lt;p&gt;A mes débuts chez Orange Business Services (en fait, c’était CVF, puis MBS, puis OBS et maintenant OAB…), je suis tombé dans une super équipe avec laquelle j’ai appris énormément de choses. Je travaillais sur une partie écrite en Erlang et j’avais été impressionné car en quelques minutes, j’avais un environnement de travail de base prêt à l’emploi, léger et entièrement customisable.&lt;/p&gt;

&lt;p&gt;C’était à base de &lt;a href=&quot;http://fr.wikipedia.org/wiki/Chroot&quot;&gt;chroot&lt;/a&gt; (Ils ont écrit 2 articles à ce sujet, le premier sur la &lt;a href=&quot;http://www.barreverte.fr/creer-un-chroot-part-1-un-linux-de-base/&quot;&gt;création d’une chroot&lt;/a&gt; et le deuxième sur la &lt;a href=&quot;http://www.barreverte.fr/creer-un-chroot-part-2-se-connecter/&quot;&gt;connexion à cette chroot&lt;/a&gt;), ça fonctionnait très bien, je m’en suis servi sur bon nombre de projets, en le faisant évoluer.&lt;/p&gt;

&lt;p&gt;Au début nous packagions la chroot en tgz pour la partager mais chaque fois qu’il y avait une modification il fallait tout repackager/redistribuer. On a changé d’approche en construisant une chroot minimale très stable, customisée directement sur le poste du developpeur avec puppet.&lt;/p&gt;

&lt;p&gt;Puis l’approche de puppet n’étant pas satisfaisante&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, nous sommes passés à Ansible.&lt;/p&gt;

&lt;p&gt;Puis la chroot nous a posé pas mal de soucis, notamment sur les changements de version d’Ubuntu (ok, on pourrait utiliser debian), donc on est passé sur docker (il faut dire aussi que, comme docker c’est plus hype, chez mon client les développeurs étaient plus intéressés pour tester docker).&lt;/p&gt;

&lt;p&gt;Comme vous pouvez le voir, ça a pas mal évolué, jusqu’à arriver à ce que je vais vous présenter maintenant.&lt;/p&gt;

&lt;h2 id=&quot;le-principe-de-docker-ansible&quot;&gt;Le principe de docker-ansible&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Utilise ansible pour construire une image docker custom
    &lt;ul&gt;
      &lt;li&gt;On joue avec les uid/gid d’un user pour permettre le lancement d’applis graphiques dans docker&lt;/li&gt;
      &lt;li&gt;On monte ‘/usr/bin/docker’ et ‘/var/run/docker.sock’ pour accéder à docker depuis le container&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Une fois l’image buildée, on la lance avec ansible
    &lt;ul&gt;
      &lt;li&gt;On monte par défaut tout &lt;code&gt;/home/developer&lt;/code&gt; (c’est l’utilisateur dans le docker), ce qui permet de tout persister sur son poste et de pouvoir réinitialiser docker sans perdre de données&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pour finir, on customise cette instance avec ansible&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;utilisation&quot;&gt;Utilisation&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Forker &lt;a href=&quot;https://github.com/agileek/docker-ansible&quot;&gt;github.com/agileek/docker-ansible&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Copier vars_example.yml vers vars.yml
    &lt;ul&gt;
      &lt;li&gt;Customiser vars.yml (vous pouvez même surcharger les variables dans &lt;code&gt;ansible/default_*.yml&lt;/code&gt; à cet endroit)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;lancer &lt;code&gt;./launch.sh path_to_save_docker_home_folder&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;lancer &lt;code&gt;./enter.sh&lt;/code&gt; pour rentrer dans le docker&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Résultat attendu :&lt;/p&gt;

&lt;p&gt;Vous êtes dans le container, dans le home de l’utilisateur developer, qui est sudoer et ne possède pas de mot de passe. Vous avez accès à votre docker parent (donc vous pouvez tuer votre propre docker, attention ;)). Tout ce que vous écrivez dans /home/developer se retrouve dans path_to_save_docker_home_folder avec les mêmes droits que votre utilisateur linux.&lt;/p&gt;

&lt;h3 id=&quot;mise--jour-de-limage-docker&quot;&gt;Mise à jour de l’image docker&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Modifier &lt;code&gt;ansible/customize_docker_container.yml&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Par exemple, vous pouvez rajouter &lt;code&gt;meld&lt;/code&gt; pour tester qu’une application graphique fonctionne bien&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Relancer &lt;code&gt;./launch.sh path_to_save_docker_home_folder&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Vérifier que ce que vous avez fait est effectif dans le container docker.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;cycle-de-vie&quot;&gt;Cycle de vie&lt;/h3&gt;

&lt;p&gt;Nous, nous avons, par projet, un repo git docker-ansible, qui contient tout un tas d’utilitaires (bash, git-prompt, serveur mysql avec bases et droits, serveur neo4j, l’IDE, des alias pour se connecter aux machines, alias git …) que chacun est libre de faire évoluer par un simple commit git. Il suffit pour récupérer les modifications de faire un git pull, puis de relancer le launch.sh (ça ne tue pas l’instance docker, donc c’est peu risqué, on peut continuer à travailler).&lt;/p&gt;

&lt;h3 id=&quot;tips&quot;&gt;Tips&lt;/h3&gt;

&lt;p&gt;La bonne approche, pour moi, est de ne pas figer le poste de développement à travers des process lourds, ou une sur-automatisation du poste. Par exemple dans le .bashrc il y a une partie qui essaie de sourcer &lt;code&gt;~/.bash_perso&lt;/code&gt; et ce &lt;code&gt;bash_perso&lt;/code&gt; n’est pas managé par ansible, ce qui permet à tout un chacun de personnaliser son poste. C’est quelque chose qu’il faut garder à l’esprit si on ne veut pas se retrouver avec quelque chose de très lourd à maintenir.&lt;/p&gt;

&lt;p&gt;Chez mon client actuel, au début nous clonions tous les projets git avec ansible, c’était très pratique mais très lourd, maintenant nous avons convenu d’un certain nombre de projets de bases, les autres sont clonés ‘à la mano’. Ça permet de ne pas se retrouver perdu quand on va binomer sur le poste du collègue. Après, testez, refactorez, expérimentez, allez-y, c’est vraiment fait pour ça et je pense que c’est vraiment pour ça que ça plait. Au final on est quand même capable de REFACTORER son poste de dev !&lt;/p&gt;

&lt;h3 id=&quot;futur&quot;&gt;Futur&lt;/h3&gt;

&lt;p&gt;Je voulais à la base mettre tous mes dotfiles directement dans ce projet, mais je me rends compte qu’il est plus intéressant de faire une version minimale et de laisser les membres de l’équipe apporter au fur et à mesure les outils qui leur font gagner du temps, permettant ainsi d’arriver à un poste de travail vraiment commun.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;c’est un avis très personnel, que je pourrais argumenter si besoin &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
            <pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate>
            <link>https://agileek.github.io/docker/2015/04/13/docker-ansible/</link>
            <guid isPermaLink="true">https://agileek.github.io/docker/2015/04/13/docker-ansible/</guid>
            
            
            <category>docker</category>
            
        </item>
        
        <item>
            <title>Docker Tips #3: How to lose data with a bad CMD</title>
            <description>&lt;h2 id=&quot;scenario&quot;&gt;Scenario&lt;/h2&gt;

&lt;p&gt;I want to be sure I don’t lose data when I stop my container.&lt;/p&gt;

&lt;h3 id=&quot;given&quot;&gt;Given&lt;/h3&gt;
&lt;p&gt;A simple program which add to a list the current time every second (Very critical program) and write the list to a file when it exits.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentDirectory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dataFolder&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parentDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createDirectories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parentDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readAllLines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addShutdownHook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Charset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;charset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferedWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newBufferedWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Couldn&amp;#39;t save lines&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I assume it’s understandable even if you are not familiar with java. If not, let me know and I’ll explain it.&lt;/p&gt;

&lt;h3 id=&quot;when&quot;&gt;When&lt;/h3&gt;

&lt;p&gt;I launch it without docker, (&lt;code&gt;java -jar docker/docker-stop-test-0.1-SNAPSHOT.jar&lt;/code&gt;) wait for a few seconds, then kill it (&lt;code&gt;kill $(ps aux | grep java | grep docker-stop-test-0.1-SNAPSHOT.jar | awk &#39;{print $2}&#39;)&lt;/code&gt;)&lt;/p&gt;

&lt;h3 id=&quot;then&quot;&gt;Then&lt;/h3&gt;
&lt;p&gt;I check in &lt;code&gt;dataFolder/data&lt;/code&gt; file and I see&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat dataFolder/data 
2015-04-12T08:47:16.873Z
2015-04-12T08:47:17.927Z
2015-04-12T08:47:18.928Z
2015-04-12T09:12:16.469Z
2015-04-12T09:12:17.521Z&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;but&quot;&gt;But&lt;/h3&gt;

&lt;p&gt;If I kill -9 instead, the data file is empty.&lt;/p&gt;

&lt;h2 id=&quot;lets-move-to-docker-now&quot;&gt;Let’s move to docker now&lt;/h2&gt;

&lt;h3 id=&quot;given-1&quot;&gt;Given&lt;/h3&gt;

&lt;p&gt;A docker image with the jre and my jar installed&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-docker&quot; data-lang=&quot;docker&quot;&gt;&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; docker-stop-test-0.1-SNAPSHOT.jar /

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt; java -jar docker-stop-test-0.1-SNAPSHOT.jar&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;when-1&quot;&gt;When&lt;/h3&gt;

&lt;p&gt;I launch a container, wait for a few seconds, then STOP (not KILL) it&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run --name docker-stop-test-bad-container -v &lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;/dataFolder-bad-cmd:/dataFolder -d docker-stop-test-bad
c08dc515319601d467db02339d3b3a84a03ab99fb4b46811cc5860abf5eea7ec
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sleep 5
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker stop docker-stop-test-bad-container
docker-stop-test-bad-container&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;then-1&quot;&gt;Then&lt;/h3&gt;

&lt;p&gt;I expect to see data in &lt;code&gt;dataFolder-bad-cmd/data&lt;/code&gt; &lt;strong&gt;&lt;em&gt;right&lt;/em&gt;&lt;/strong&gt;? &lt;strong&gt;&lt;em&gt;Wrong&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There is nothing written in the data file, that means I just lost everything!&lt;/p&gt;

&lt;h2 id=&quot;explanations&quot;&gt;Explanations&lt;/h2&gt;

&lt;p&gt;If you look at the CMD command: &lt;code&gt;CMD java -jar docker-stop-test-0.1-SNAPSHOT.jar&lt;/code&gt; everything looks ok.
But when you run this image and inspect the created container, you will see this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Cmd&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;java -jar docker-stop-test-0.1-SNAPSHOT.jar&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Docker wrapped my command within a shell script. So what, that’s not that big a deal right?&lt;/p&gt;

&lt;p&gt;In fact, if you look at the docker &lt;a href=&quot;https://docs.docker.com/reference/builder/#cmd&quot;&gt;documentation&lt;/a&gt;, you don’t see anything useful. You have to look at the &lt;a href=&quot;https://docs.docker.com/reference/builder/#entrypoint&quot;&gt;ENTRYPOINT&lt;/a&gt; documentation and dig into it a little to see that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The shell form prevents any CMD or run command line arguments from being used, but has the disadvantage that your ENTRYPOINT will be started as a subcommand of /bin/sh -c, which does not pass signals. This means that the executable will not be the container’s PID 1 - and will not receive Unix signals - so your executable will not receive a SIGTERM from docker stop &lt;container&gt;.&lt;/container&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Don’t use the most intuitive syntax in the CMD or ENTRYPOINT command, use the exec form. If you replace the CMD command in the dockerfile by this one:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-docker&quot; data-lang=&quot;docker&quot;&gt;&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;java&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;-jar&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;docker-stop-test-0.1-SNAPSHOT.jar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then everything works like a charm, the SIGTERM is received and the java application save its list into the data file before exiting.&lt;/p&gt;

&lt;h2 id=&quot;diy&quot;&gt;DIY&lt;/h2&gt;

&lt;p&gt;If you want to try it by yourself, everything is on my &lt;a href=&quot;https://github.com/agileek/docker-tips/tree/master/cmd&quot;&gt;github repository&lt;/a&gt;. You have two shell scripts: &lt;code&gt;docker-build-all.sh&lt;/code&gt; and &lt;code&gt;docker-run-all.sh&lt;/code&gt;. The first will build the images with the bad syntax and the good one. The second script will run containers from these images, wait 5 seconds, stop them.&lt;/p&gt;

&lt;p&gt;You can then check in &lt;code&gt;dataFolder-bad-cmd/data&lt;/code&gt; and &lt;code&gt;dataFolder-good-cmd/data&lt;/code&gt; to see the differences.&lt;/p&gt;

</description>
            <pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate>
            <link>https://agileek.github.io/docker/2015/04/12/docker-cmd/</link>
            <guid isPermaLink="true">https://agileek.github.io/docker/2015/04/12/docker-cmd/</guid>
            
            
            <category>docker</category>
            
        </item>
        
        <item>
            <title>Docker Tips #2: Limit the layers</title>
            <description>&lt;h2 id=&quot;scenario&quot;&gt;Scenario&lt;/h2&gt;

&lt;p&gt;I want to transfer &lt;strong&gt;&lt;em&gt;efficiently&lt;/em&gt;&lt;/strong&gt; my images to the production machines.&lt;/p&gt;

&lt;h3 id=&quot;given&quot;&gt;Given&lt;/h3&gt;
&lt;p&gt;My Dockerfile with android sdk&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-docker&quot; data-lang=&quot;docker&quot;&gt;&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; http://dl.google.com/android/android-sdk_r24.0.2-linux.tgz /opt/android-sdk.tgz
&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; tar xzf /opt/android-sdk.tgz -C /opt/
&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; rm -f /opt/android-sdk.tgz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;built with &lt;code&gt;docker build -t docker_layers .&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;when&quot;&gt;When&lt;/h3&gt;
&lt;p&gt;I want to push it to the registry&lt;/p&gt;

&lt;h3 id=&quot;then&quot;&gt;Then&lt;/h3&gt;

&lt;p&gt;It will push 3 layers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the first is the android tgz pushed into /opt&lt;/li&gt;
  &lt;li&gt;the second is the &lt;strong&gt;&lt;em&gt;extracted&lt;/em&gt;&lt;/strong&gt; sdk into the /opt directory&lt;/li&gt;
  &lt;li&gt;the last one is the deletion of the tgz&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is really not optimal, the first and third layer are useless. Worst, they use space on your filesystems, on your network when you pull/push, …&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;It is a good practice to merge common operations into one single docker command.&lt;/p&gt;

&lt;p&gt;For this example it would be:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-docker&quot; data-lang=&quot;docker&quot;&gt;&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /opt &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    wget --output-document&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;android-sdk.tgz --quiet http://dl.google.com/android/android-sdk_r24.0.2-linux.tgz &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    tar xzf android-sdk.tgz &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    rm -f android-sdk.tgz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In that way you only have one layer commited, and it contains only the needed android sdk extracted.&lt;/p&gt;

&lt;h3 id=&quot;caveats&quot;&gt;Caveats&lt;/h3&gt;

&lt;p&gt;There is one drawback with this particular approach: You lose the capacities of the &lt;code&gt;ADD&lt;/code&gt; syntax.&lt;/p&gt;

&lt;p&gt;If you build the first Dockerfile, you will notice that each time the tgz is downloaded. Docker then verifies that the file hasn’t changed and if not, uses the cached image.&lt;/p&gt;

&lt;p&gt;That means that if the tgz changes, there will be a new build, whereas with the one-line approach, it will not, because docker will just verify that the command hasn’t changed, not the content downloaded by the wget.&lt;/p&gt;

&lt;h2 id=&quot;templates&quot;&gt;Templates&lt;/h2&gt;

&lt;p&gt;The general approach is :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Prepare what you want to do&lt;/li&gt;
  &lt;li&gt;Do it&lt;/li&gt;
  &lt;li&gt;Clean everything that is not necessary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The example with the android sdk works for all archives that must be extracted.&lt;/p&gt;

&lt;p&gt;Below are templates from our experience that we think doesn’t alter readability while reducing the layers and the size of the docker image.&lt;/p&gt;

&lt;h3 id=&quot;apt&quot;&gt;APT&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-docker&quot; data-lang=&quot;docker&quot;&gt;&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    apt-get install -y whatever &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    apt-get clean &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    apt-get autoclean &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;yum&quot;&gt;Yum&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-docker&quot; data-lang=&quot;docker&quot;&gt;&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; yum -y update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    yum -y install whatever &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    yum clean all&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;an-other-very-important-thing-is-to-keep-your-dockerfile-readable&quot;&gt;An other &lt;strong&gt;&lt;em&gt;very&lt;/em&gt;&lt;/strong&gt; important thing is to keep your Dockerfile &lt;strong&gt;&lt;em&gt;readable&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This example is, in my opinion, a bad one.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;ENV PHANTOM_JS_TAG 2.0.0

RUN \
  echo &amp;quot;deb http://ppa.launchpad.net/git-core/ppa/ubuntu $(lsb_release -cs) main&amp;quot; \
    | tee /etc/apt/sources.list.d/git.list &amp;amp;&amp;amp; \
  DEBIAN_FRONTEND=noniteractive \
    apt-key adv --keyserver hkp://hkps.pool.sks-keyservers.net --recv-keys E1DF1F24 &amp;amp;&amp;amp; \
  apt-get update &amp;amp;&amp;amp; \
  DEBIAN_FRONTEND=noninteractive \
    apt-get -y --no-install-recommends install git &amp;amp;&amp;amp; \
  DEBIAN_FRONTEND=noninteractive \
    apt-get -y install \
      libfontconfig1 \
      libjpeg8 \
      libicu52 \
  &amp;amp;&amp;amp; \
  DEBIAN_FRONTEND=noninteractive \
    apt-get -y install \
      build-essential \
      g++ flex bison gperf ruby perl python \
      libsqlite3-dev libfontconfig1-dev libicu-dev \
      libfreetype6 libssl-dev libpng-dev libjpeg-dev \
# Note: It is recommend also to install ttf-mscorefonts-installer package.
# (http://phantomjs.org/build.html)
#      ttf-mscorefonts-installer \
  &amp;amp;&amp;amp; \
  git clone https://github.com/ariya/phantomjs.git /tmp/phantomjs &amp;amp;&amp;amp; \
  cd /tmp/phantomjs &amp;amp;&amp;amp; \
  git checkout ${PHANTOM_JS_TAG} &amp;amp;&amp;amp; \
  ./build.sh --confirm &amp;amp;&amp;amp; \
  mv bin/phantomjs /usr/local/bin &amp;amp;&amp;amp; \
  rm -rf /tmp/phantomjs \
  &amp;amp;&amp;amp; \
  DEBIAN_FRONTEND=noninteractive \
    apt-get -y purge \
      build-essential \
      g++ flex bison gperf ruby perl python \
      libsqlite3-dev libfontconfig1-dev libicu-dev \
      libfreetype6 libssl-dev libpng-dev libjpeg-dev \
  &amp;amp;&amp;amp; \
  DEBIAN_FRONTEND=noninteractive \
    apt-get autoremove --purge -y &amp;amp;&amp;amp; \
  apt-get clean &amp;amp;&amp;amp; \
  rm -rf /var/lib/apt/lists/*&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/MichaelBitard/7bd7bc71385326ab3238.js?file=Dockerfile&quot;&gt; &lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;Yes, it’s only one docker RUN command&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;ps&quot;&gt;PS&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;If you know other tips to reduce the number of layers without losing readability, feel free to post a comment, I’ll gladly add them here.&lt;/li&gt;
&lt;/ul&gt;
</description>
            <pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate>
            <link>https://agileek.github.io/docker/2015/04/11/docker-layers/</link>
            <guid isPermaLink="true">https://agileek.github.io/docker/2015/04/11/docker-layers/</guid>
            
            
            <category>docker</category>
            
        </item>
        
        <item>
            <title>Devoxx France : jour 3</title>
            <description>&lt;p&gt;&lt;img src=&quot;/images/posts/devoxx/devoxx_france.png&quot; alt=&quot;Devoxx&quot; class=&quot;float_image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;keynote&quot;&gt;Keynote&lt;/h2&gt;

&lt;h3 id=&quot;un-robot-peut-il-apprendre-comme-un-enfant-&quot;&gt;Un robot peut-il apprendre comme un enfant ?&lt;/h3&gt;

&lt;p&gt;On recommence avec les robots pour cette première keynote de Pierre-Yves Oudeyer.&lt;/p&gt;

&lt;p&gt;Nous avons tous une vision des robots en tant qu’extension de nos mains (robots aspirateurs, ceux sur Mars, pour tondre la pelouse,…) mais Pierre-Yves essaie de créer des robots qui étendent notre esprit. Pour cela il se base sur l’observation de l’apprentissage des enfants. C’est bluffant de voir à quel point en analysant mathématiquement nos interactions avec le monde extérieur on peut modéliser le comportement d’un nouveau né.&lt;/p&gt;

&lt;h4 id=&quot;comment-les-langues-naissent-elles-&quot;&gt;Comment les langues naissent-elles ?&lt;/h4&gt;

&lt;p&gt;En mettant un groupe de robots “curieux” dans un espace restreint, on peut observer l’apparition d’un langage. Les robots désignent un objet et tentent de le nommer par paire. Au bout d’un moment un consensus apparait et ce mot se diffuse auprès des autres robots.&lt;/p&gt;

&lt;p&gt;Il nous a également présenté &lt;a href=&quot;http://www.poppy-project.com&quot;&gt;Poppy&lt;/a&gt;, un robot imprimé en 3D open source.&lt;/p&gt;

&lt;h3 id=&quot;the-decentralization-singularity&quot;&gt;The decentralization singularity&lt;/h3&gt;

&lt;p&gt;Stéphan Tual nous parle d’Ethereum. Il commence avec le constat de la centralisation d’internet (Facebook, Amazon), qui n’était pas intentionnel, mais a émergé par simplicité.&lt;/p&gt;

&lt;p&gt;Pour ceux qui ne connaissent pas, Ethereum se base sur Bitcoin. L’idée est de mettre du code dans la blockchain pour que tous les éléments du réseau puissent l’exécuter et s’assurer qu’il n y a pas de fraude.&lt;/p&gt;

&lt;h3 id=&quot;clever-cloud&quot;&gt;Clever cloud&lt;/h3&gt;

&lt;p&gt;Le présentateur prend à contre pied le mouvement DevOps en nous exposant un parallèle très intéressant avec l’électricité. En effet au début de l’électricité les entreprises avaient leur propre façon de générer l’électricité, avec tous les écarts que ça implique (alternatif/continue, voltage). Aujourd’hui on ne se pose plus de question sur l’électricité, ça fonctionne, point.&lt;/p&gt;

&lt;p&gt;L’infrastructure doit être pour les développeurs comme l’électricité : accessible sans même avoir à y penser, et fiable. J’avoue être plus proche du mouvement DevOps mais sa vision donne à réfléchir.&lt;/p&gt;

&lt;h3 id=&quot;futurejava&quot;&gt;Future&lt;java&gt;&lt;/java&gt;&lt;/h3&gt;

&lt;p&gt;Brian Goetz nous parle pour cette dernière keynote du futur de Java, en nous parlant de son passé. Ayant suivi sa conférence hier, je n’ai pas appris grand chose à celle-ci.&lt;/p&gt;

&lt;p&gt;Une chose très intéressante par contre, c’est l’arrivée (Java 10 ?) des value class, qui sont à la limite entre objets et type primitifs, permettant une abstraction équivalent à l’objet tout en ayant un comportement mémoire primitif.&lt;/p&gt;

&lt;p&gt;Ça permettra ce genre de concepts, j’ai déjà hâte.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;integerSum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parallelStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Avouez que ça fait rêver non ?&lt;/p&gt;

&lt;h2 id=&quot;des-tablettes-dcriture-aux-tablettes-pour-crire&quot;&gt;Des tablettes d’écriture aux tablettes pour écrire&lt;/h2&gt;

&lt;p&gt;Première session non technique. J’avoue que j’ai fait le choix à cause de la speaker : Clarrisse Herrenschmidt. Elle avait fait une keynote d’ouverture à Devoxx 2013 tout simplement fabuleuse. Elle avait parlé de l’histoire des chiffres, du début de l’humanité à aujourd’hui. C’est je pense la seule session à laquelle j’ai assisté et que j’ai re-regardée sur Parleys. Allez &lt;a href=&quot;https://www.parleys.com/tutorial/lhistoire-des-ecritures&quot;&gt;la voir&lt;/a&gt;, vous ne serez pas déçu.&lt;/p&gt;

&lt;p&gt;Pour cette session elle nous parle de l’évolution de l’écriture avec l’essort des technologies modernes.&lt;/p&gt;

&lt;p&gt;Les choses bougent un peu partout :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;45 états américains sur 50 ont arrêté l’écriture cursive pour l’écriture script&lt;/li&gt;
  &lt;li&gt;Allemagne, chaque chef d’établissement décide&lt;/li&gt;
  &lt;li&gt;En Suisse, ils étaient passés à l’écriture script, ils en sont revenus et maintenant c’est de la responsabilité des cantons.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depuis l’origine, ce sont les nombres qui ont amenés les modifications dans les langues (l’Homme est-il vénal ?).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Écrire, c’est soumettre la main et le corps à l’activité mentale.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Betty Moreau nous parle ensuite de l’activité du cerveau lié à l’écriture. C’est en fait une activité qui occupe presque tout le cerveau.&lt;/p&gt;

&lt;p&gt;Il y’a des différences fondamentales entre l’écriture cursive et l’écriture liée :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;L’écriture cursive&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;liée comme la pensée&lt;/li&gt;
  &lt;li&gt;rapide&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;mais elle demande une finesse motrice importante à la différence de &lt;strong&gt;&lt;em&gt;l’écriture script&lt;/em&gt;&lt;/strong&gt; qui est :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;simple&lt;/li&gt;
  &lt;li&gt;ressemblant aux écrits sur écran&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;mais son espacement donnant du sens est difficile à acquérir pour les petits et elle est lente.&lt;/p&gt;

&lt;p&gt;Que se passe-t-il quand on se sert d’un clavier ? Le cortex sensori-moteur ne s’active pas. Le cerveau est statisticien, il se conditionne et se lasse, et il aime les récompenses.&lt;/p&gt;

&lt;p&gt;Plusieurs études sont en cours pour évaluer l’impact de l’utilisation d’un clavier plutôt que l’écriture manuelle à l’école&lt;/p&gt;

&lt;p&gt;Pour un test, ils ont pris 76 enfants de 33 à 57 mois, la moitié apprenant au stylo, l’autre au clavier. Il est apparu clairement que les enfants utilisant des stylos avaient une meilleurs reconnaissance des lettres que les autres.&lt;/p&gt;

&lt;p&gt;La deuxième étude a été effectuée sur un échantillon de 1000 élèves de niveau CE1.&lt;/p&gt;

&lt;p&gt;Ils se sont rendu compte que si l’écriture était correcte à 4 ans, le niveau de l’élève était meilleur en math ET en français&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ne laissons pas de côté un quelconque savoir. Car un savoir ne peut être quelconque.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;iot-java-and-autonomous-drones&quot;&gt;Iot, Java and Autonomous Drones&lt;/h2&gt;

&lt;p&gt;Dernière conférence pour moi, il faut bien rentrer et ce n’est pas la porte à côté.&lt;/p&gt;

&lt;p&gt;James Weaving va nous parler de programmation de drones autonomes. Concrètement il branche des RaspBerry Pi sur des quadcopters.&lt;/p&gt;

&lt;p&gt;Ils ont fait plusieurs choix techniques :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Parrot 2.0&lt;/li&gt;
  &lt;li&gt;Parrots On Java/Parroteer&lt;/li&gt;
  &lt;li&gt;Raspberry Pi&lt;/li&gt;
  &lt;li&gt;PowerBank pour rendre le raspberry pi “autonome”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Le Raspberry Pi possède deux dongles wifi, un pour communiquer avec le parrot, l’autre sert d’access point pour pouvoir s’y connecter depuis son laptop.
Ils voulaient embarquer le raspberry pi directement sur le parrot, mais le poids supplémentaire le rendait trop instable.&lt;/p&gt;

&lt;p&gt;Ils ont crée une API pour simplifier les commandes (Autonomous4J), et pouvoir envoyer des scénarios prédéterminés au drone.&lt;/p&gt;

&lt;p&gt;Comme leurs tests étaient trop dangereux pour leur famille et leurs objets personnels, ils ont crée un simulateur 3D en JavaFX (Arf).&lt;/p&gt;

&lt;p&gt;Toutes les resources sont sur le bitbucket &lt;a href=&quot;http://autonomous4j.org&quot;&gt;autonomous4j&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Encore une grosse édition Devoxx, bien fatiguante. Cette année est en demi teinte pour moi car je considérais Devoxx comme une conférence pour développeurs passionnés, mais j’ai croisé beaucoup de personnes qui étaient là “quasiment obligé” par leur entreprise parce que “Devoxx c’est cool”.&lt;/p&gt;

&lt;p&gt;En tout cas j’ai hâte que le vidéos soient sur Parleys pour visionner tout ce que je voulais aller voir et que j’ai manqué.&lt;/p&gt;

&lt;h3 id=&quot;ps&quot;&gt;PS&lt;/h3&gt;

&lt;p&gt;Dès que les vidéos sont sur Parleys, je vais repasser sur les 3 posts devoxx pour faire une jolie mise en forme et faire les liens vers les vidéos.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;ce n’est pas forcément une relation de causalité directe &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
            <pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate>
            <link>https://agileek.github.io/java/2015/04/10/devoxx-france-third-day/</link>
            <guid isPermaLink="true">https://agileek.github.io/java/2015/04/10/devoxx-france-third-day/</guid>
            
            
            <category>java</category>
            
        </item>
        
        <item>
            <title>Devoxx France : jour 2</title>
            <description>&lt;p&gt;&lt;img src=&quot;/images/posts/devoxx/devoxx_france.png&quot; alt=&quot;Devoxx&quot; class=&quot;float_image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;keynotes&quot;&gt;Keynotes&lt;/h2&gt;

&lt;p&gt;Cette première session de keynotes va nous parler du futur de l’informatique.&lt;/p&gt;

&lt;h3 id=&quot;aldebaran&quot;&gt;Aldebaran&lt;/h3&gt;

&lt;p&gt;Le premier speaker nous parle de ce que sera la robotique dans le futur, au travers de sa société.&lt;/p&gt;

&lt;p&gt;Les premières applications seront probablement l’assistance aux personnes agées, ce qui ne sera pas disponible avant 5 ans, à cause des problématiques de reconnaissance vocale à distance.&lt;/p&gt;

&lt;p&gt;Pour lui, dans 20 ans les robots seront devenus des compagnons présents dans nos logements, nous assistant dans nos taches quotidiennes. Il seront en quelque sorte au coeur de la domotique.&lt;/p&gt;

&lt;p&gt;Petit point bluffant avec ces petits robots : ils sont capables de détecter les émotions (colère, tristesse) au travers des dialogues.&lt;/p&gt;

&lt;h4 id=&quot;quelle-responsabilit-pour-le-dveloppeur&quot;&gt;Quelle responsabilité pour le développeur&lt;/h4&gt;

&lt;p&gt;Le robot est un outil, il peut être bien ou mal utilisé.&lt;/p&gt;

&lt;p&gt;Le robot est une plateforme programmable par n’importe qui, intégrer les  lois de la robotique d’Asimov s’avère compliqué, et au final pas très efficace (Si on lit ses livres, on se rend compte qu’elles ne fonctionnent pas).&lt;/p&gt;

&lt;p&gt;Il existe un problème lié à la responsabilité du robot. Qui est responsable en cas d’accident? Le robot ? La société qui a crée le robot ? Le développeur ?&lt;/p&gt;

&lt;h3 id=&quot;la-problmatique-du-contrle-des-technologies-de-linformation&quot;&gt;La problématique du contrôle des technologies de l’information&lt;/h3&gt;

&lt;p&gt;Excellente proposition : après Devoxx4Kids, faire un Devoxx4HommesPolitiques.&lt;/p&gt;

&lt;p&gt;La problématique actuelle est la démocratisation des outils informatiques. Les premiers acteurs de l’informatique étaient des techos qui avaient un idéal, maintenant ce sont des gens qui ne maitrisent pas la technique et sont intéressés par le pouvoir.&lt;/p&gt;

&lt;p&gt;Cinq phases de contrôle :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Préhistoire&lt;/li&gt;
  &lt;li&gt;Phase de mutation&lt;/li&gt;
  &lt;li&gt;Phase de globalisation&lt;/li&gt;
  &lt;li&gt;Phase légale&lt;/li&gt;
  &lt;li&gt;Phase d’assimilation culturelle&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Qu’on me donne six lignes écrites de la main du plus honnête homme, j’y trouverai de quoi le faire pendre (Richelieu)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Le problème qui se pose derrière la surveillance globalisée qui se met en place, c’est que le citoyen n’est plus “présumé innocent”, mais “présumé coupable”, ce qui change les fondements de notre société.&lt;/p&gt;

&lt;p&gt;Le scénario de l’espoir :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Le respect de la vie privée redevient une priorité
    &lt;ul&gt;
      &lt;li&gt;Inscription dans la constitution&lt;/li&gt;
      &lt;li&gt;Renforcement du rôle du juge d’instruction&lt;/li&gt;
      &lt;li&gt;Création d’un comité d’éthique&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Nous redevenos des citoyens&lt;/li&gt;
  &lt;li&gt;Développement du marché de la confiance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En conclusion :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;L’espionnage des citoyens par leur propre état trahit la faiblesse et la peur de ces états&lt;/li&gt;
  &lt;li&gt;Le rôle fondamental des concepteurs et des developpeurs
    &lt;ul&gt;
      &lt;li&gt;Ce sont les gardiens de la technologie&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;La liberté sans libre arbitre n’existe pas et le libre arbitre sans le respect de notre vie privée n’existe pas&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reading-and-writing-in-20-years&quot;&gt;Reading and writing in 20 years&lt;/h2&gt;

&lt;p&gt;Aujourd’hui, tout ce que nous écrivons a une durée de vie qui nous dépasse (on peut retrouver ses premiers email facilement), c’était quelque chose qui n’était pas possible avant, pas à cette échelle. Que se passera-t-il dans 20 ans ?&lt;/p&gt;

&lt;p&gt;Il nous parle beaucoup de la capacité qu’on a maintenant à écrire, à partager&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; de plus en plus facilement. Mais il nous parle également des freins que l’on peut rencontrer.&lt;/p&gt;

&lt;p&gt;Quelles sont les contraintes actuelles qui nous empêchent de publier ? Il prend pour exemple le PDF, en tant que technologie du passé qui s’accroche encore au support papier et qui nous impose des contraintes (Je possède un kindle, c’est tout simplement impossible de lire un PDF, ce n’est pas du tout adapté)&lt;/p&gt;

&lt;h2 id=&quot;quickies&quot;&gt;Quickies&lt;/h2&gt;
&lt;p&gt;Haa, les quickies, ou le gros dilemme du : je mange ou j’assiste à une conf ?&lt;/p&gt;

&lt;h3 id=&quot;avro--la-souplesse-du-json-les-performances-du-binaire&quot;&gt;Avro : la souplesse du Json, les performances du binaire&lt;/h3&gt;

&lt;p&gt;Outil de sérialisation, c’est à la base un sous projet d’hadoop.&lt;/p&gt;

&lt;p&gt;Il est utilisé dans hadoop pour stoquer des gros volumes de données dans des fichiers.&lt;/p&gt;

&lt;p&gt;L’idée derrière ce lightning talk c’est de montrer qu’il est possible d’utiliser Avro pour autre chose que du bigData. Tout transfert de données un peu important (Rest, …) peut être amélioré avec Avro. Il permet d’encoder nos données dans un format spécifique. IL permet en plus d’ajouter simplement des compresseurs afin d’optimiser les transferts.&lt;/p&gt;

&lt;p&gt;La killer feature : il est possible de spécifier un schéma d’écriture et un schéma de lecture, ce qui permet de pouvoir extraire que les données que l’on souhaite utiliser et ainsi gagner du temps et de la place. (Il y a une méthode qui permet de vérifier la compatibilité entre le writer et le reader)&lt;/p&gt;

&lt;p&gt;Les &lt;a href=&quot;https://github.com/alexvictoor/AvroDevoxxFr&quot;&gt;sources&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;changing-wheels-of-a-moving-car&quot;&gt;Changing wheels of a moving car&lt;/h2&gt;

&lt;p&gt;Présenté par Nicolas De Loof. Cet homme est fou :)&lt;/p&gt;

&lt;p&gt;Je préfère ne pas vous spoiler cette session, il faut la voir&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. Il nous parle de son retour d’expérience sur cloudbees, notamment ses déboires/surprises avec le cloud amazon.&lt;/p&gt;

&lt;h2 id=&quot;modular-java-platform&quot;&gt;Modular Java Platform&lt;/h2&gt;

&lt;h3 id=&quot;constat&quot;&gt;Constat&lt;/h3&gt;

&lt;p&gt;Java connait un certain nombre de problèmes, notamment :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Taille
    &lt;ul&gt;
      &lt;li&gt;Java a continuellement grossi avec le temps (55 MB). Ce n’était pas forcément un problème vu le prix du stockage, c’est en train de le devenir avec l’émergence de l’IoT.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Démarrage
    &lt;ul&gt;
      &lt;li&gt;Java est lent à démarrer (la compilation dynamique, JIT, …) sans parler du classloader.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Sécurité
    &lt;ul&gt;
      &lt;li&gt;Le security manager est trop limité, de plus personne ne s’en sert (2 mains levées dans l’assistance)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Utilisation d’api internes
    &lt;ul&gt;
      &lt;li&gt;Rien n’empêche d’utiliser ces api.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Jar hell
    &lt;ul&gt;
      &lt;li&gt;On connait tous les problème de versions multiples dans le classpath&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jigsaw&quot;&gt;Jigsaw&lt;/h3&gt;

&lt;p&gt;En rendant Java modulaire, les problèmes cités ci-dessus devraient disparaitre (ou être plus simples à addresser).&lt;/p&gt;

&lt;p&gt;Pour le moment, ils ont identifié une cinquantaine de modules dans le JDK. Il y’a 4 JEP (200, 201, 220…)&lt;/p&gt;

&lt;p&gt;JShell : java va enfin avoir son REPL !&lt;/p&gt;

&lt;h4 id=&quot;jep-201-modular-source-code&quot;&gt;JEP 201: Modular Source Code&lt;/h4&gt;

&lt;p&gt;Toutes les sources ont du être déplacées pour les pre-fixer par leur module.&lt;/p&gt;

&lt;h4 id=&quot;jep-220-modular-run-time-images&quot;&gt;JEP 220: Modular Run-Time images&lt;/h4&gt;

&lt;p&gt;Pour récupérer une SystemResource (ClassLoader.getSystemResource()), java ne retournera plus un path du filesystem mais plutôt un pointeur vers la resource. Ça risque de faire mal à migrer.&lt;/p&gt;

&lt;h4 id=&quot;ce-qui-change-pour-nous&quot;&gt;Ce qui change pour nous&lt;/h4&gt;

&lt;p&gt;Un nouveau format de fichier apparait : jmod.
Le Jar étant juste un zip renommé, il est trop limitant et aucune meta-data ne peut y être ajouté (c’est faux, Osgi par exemple se sert du MANIFEST.mf, mais ça reste une convention). Le .jmod permet de déclarer les dépendances aux différents modules java, afin d’avoir un arbre de dépendance très fin.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sun.*&lt;/code&gt; et &lt;code&gt;*.internal.*&lt;/code&gt; ne seront plus accessibles (un support temporaire est prévu pour aider aux migrations).&lt;/p&gt;

&lt;p&gt;jdeps : permet de savoir quels sont les apis de base dont notre code dépent (accessible depuis java 8).&lt;/p&gt;

&lt;p&gt;rt.jar et tools.jar ont disparu.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Ce blog en est la preuve &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Dès que le lien est sur Parleys, je linkerai la vidéo ici &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
            <pubDate>Thu, 09 Apr 2015 00:00:00 +0000</pubDate>
            <link>https://agileek.github.io/java/2015/04/09/devoxx-france-second-day/</link>
            <guid isPermaLink="true">https://agileek.github.io/java/2015/04/09/devoxx-france-second-day/</guid>
            
            
            <category>java</category>
            
        </item>
        
    </channel>
</rss>
